// Driver for 63_graph_floyd for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the length of the shortest path from any source to any dest in the undirected graph defined by the adjacency matrix A
// using floyd algorithm.
//    A is an NxN adjacency matrix stored in row-major. Assume the graph is connected. A is undirected.
//    Example:
//    
//    input: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [0, 1, 1, 0]]
//    output: [[0, 1, 1, 2], [1, 0, 2, 1], [1, 2, 0, 1], [2, 1, 1, 0]]
// */
// void floyd(std::vector<int> const& A, size_t N, std::vector<int>& R) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include <iostream>
#include <iterator>


#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int> A;
    std::vector<int> R;
    size_t N;
};

void randomConnectedUndirectedGraph(std::vector<int> &A, size_t N) {
    std::vector<int> nodes(N);
    std::iota(nodes.begin(), nodes.end(), 0);
//    std::random_shuffle(nodes.begin(), nodes.end());

    std::random_device rd;
    std::mt19937 g(rd());

    std::shuffle(nodes.begin(), nodes.end(), g);

    for(int i=0;i<N;i++)	
        for(int j=0;j<N;j++)
            A[i*N+j] = std::numeric_limits<int>::max()/4; 

    for (int i = 0; i < N-1; i += 1) {
        A[nodes[i] * N + nodes[i+1]] = 1;
        A[nodes[i+1] * N + nodes[i]] = 1;
    }

    for (int i = 0; i < N; i += 1) {
        int numEdges = rand() % (N - 1);
        for (int j = 0; j < numEdges; j += 1) {
            int other = rand() % N;
            if (other != i) {
                A[i * N + other] = 1;
                A[other * N + i] = 1;
            }
        }
    }

}

void reset(Context *ctx) {
    randomConnectedUndirectedGraph(ctx->A, ctx->N);
    BCAST(ctx->A, INT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->A.resize(ctx->N * ctx->N);
    ctx->R.resize(ctx->N * ctx->N);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    floyd(ctx->A, ctx->N, ctx->R);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctFloyd(ctx->A, ctx->N, ctx->R);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = (1<<10);

    std::vector<int> A(TEST_SIZE * TEST_SIZE);
    std::vector<int> correct(TEST_SIZE * TEST_SIZE);
    std::vector<int> test(TEST_SIZE * TEST_SIZE);
    
    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        randomConnectedUndirectedGraph(A, TEST_SIZE);
        
        BCAST(A, INT);

        // compute correct result
        correctFloyd(A, TEST_SIZE, correct);

        // compute test result
        floyd(A, TEST_SIZE, test);
        SYNC();
        

        bool isCorrect = true;
        if (IS_ROOT(rank) && !std::equal(correct.begin(), correct.end(), test.begin())) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
