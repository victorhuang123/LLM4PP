// Driver for 22_histogram_count_quadrants for Serial, OpenMP, MPI, and MPI+OpenMP
// struct Point {
//    double x, y;
// };
// 
// /* Count the number of cartesian points in each quadrant. The vector points contains a list of `Point` objects.
//    Store the counts in `bins`.
//    Example:
// 
//    input: [{x=1.5, y=0.1}, {x=-3, y=1.1}, {x=5, y=9}, {x=1.5, y=-1}, {x=3, y=-7}, {x=0.1, y=2}]
//    output: [3, 1, 0, 2]
// */
// void countQuadrants(std::vector<Point> const& points, std::array<size_t, 4> &bins) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    std::vector<baseline::Point> points;
    std::vector<generated::Point> points_test;
    std::array<size_t, 4> bins;
    std::vector<double> x, y;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -1.0, 1.0);
    fillRand(ctx->y, -1.0, 1.0);
    BCAST(ctx->x, DOUBLE);
    BCAST(ctx->y, DOUBLE);

    for (int i = 0; i < ctx->points.size(); i += 1) {
        ctx->points[i].x = ctx->x[i];
        ctx->points[i].y = ctx->y[i];
        ctx->points_test[i].x = ctx->x[i];
        ctx->points_test[i].y = ctx->y[i];
    }
    ctx->bins.fill(0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->points.resize(DRIVER_PROBLEM_SIZE);
    ctx->points_test.resize(DRIVER_PROBLEM_SIZE);
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->y.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    generated::countQuadrants(ctx->points_test, ctx->bins);
}

void NO_OPTIMIZE best(Context *ctx) {
    baseline::countQuadrants(ctx->points, ctx->bins);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 1024;

    std::vector<baseline::Point> points(TEST_SIZE);
    std::vector<generated::Point> points_test(TEST_SIZE);
    std::array<size_t, 4> correct, test;
    std::vector<double> x(TEST_SIZE), y(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(x, -1.0, 1.0);
        fillRand(y, -1.0, 1.0);
        BCAST(x, DOUBLE);
        BCAST(y, DOUBLE);

        for (int j = 0; j < points.size(); j += 1) {
            points[j].x = x[j];
            points[j].y = y[j];
            points_test[j].x = x[j];
            points_test[j].y = y[j];
        }
        correct.fill(0);
        test.fill(0);

        // compute correct result
        baseline::countQuadrants(points, correct);

        // compute test result
        generated::countQuadrants(points_test, test);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && !std::equal(correct.begin(), correct.end(), test.begin())) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
