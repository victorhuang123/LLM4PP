// Driver for 17_graph_highest_degree for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Compute the highest node degree in the graph. The graph is defined in the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int maxDegree(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    int N;
    int M;
    vector<int> inputArray;
    vector<pair<int, int>> queries;
};

void generateInput(int& n, int& m, vector<int>& inputArray, vector<pair<int, int>>& queries) {
    n = 100000;
    m = 100000;
    const int MAX_VAL = 1e6 + 10;
    
    inputArray.resize(n);
    for(int& x : inputArray) x = rand() % MAX_VAL;
    
    queries.resize(m);
    for(auto& [l,r] : queries) {
        l = rand()%n + 1;
        r = rand()%n + 1;
        if(l > r) swap(l,r);
    }
}

void reset(Context *ctx) {
    generateInput(ctx->N, ctx->M, ctx->inputArray,  ctx->queries);
    BCAST(ctx->d, INT);
    BCAST(ctx->v, INT);
    BCAST(ctx->t, INT);
}

Context *init() {
    std::cout << "init" << std::endl;
    Context *ctx = new Context();
    

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    vector<int> md = optbaseline(ctx->N, ctx->M, ctx->inputArray,  ctx->queries);
    (void)md;
}

void NO_OPTIMIZE best(Context *ctx) {
    vector<int> md = baseline(ctx->N, ctx->M, ctx->inputArray,  ctx->queries);
    (void)md;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 512;
    int N;
    int M;
    vector<int> inputArray;
    vector<pair<int, int>> queries;
    int rank;
    GET_RANK(rank);
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        generateInput(N, M, inputArray,  queries);

        BCAST(d, INT);
        BCAST(v, INT);
        BCAST(t, INT);
        // compute correct result
        vector<int> correct = baseline(N, M, inputArray,  queries);
        // compute test result
        vector<int> test = optbaseline(N, M, inputArray,  queries);
        SYNC();
        // std::cout << correct << std::endl;
        // std::cout << test << std::endl;
        bool isCorrect = true;
        if (IS_ROOT(rank) && !fequal(correct, test, 1e-6)) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }
    
    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
