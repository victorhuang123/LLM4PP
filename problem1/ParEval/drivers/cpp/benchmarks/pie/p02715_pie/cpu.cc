
#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

typedef long long ll;
struct Context {
    long long N;
    long long K;
};


void reset(Context *ctx) {
}

Context *init() {
    std::cout << "init" << std::endl;
    Context *ctx = new Context();
    ctx->N = 1000000;
    ctx->K = 1000000;
    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    ll md = optbaseline(ctx->N, ctx->K);
    (void)md;
}

void NO_OPTIMIZE best(Context *ctx) {
    ll md = baseline(ctx->N, ctx->K);
    (void)md;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 512;
    std::vector<ll> d;
    std::vector<ll> v;
    std::vector<ll> t;
    int rank;
    GET_RANK(rank);
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        // generateInput(TEST_SIZE, d, v,  t);

        BCAST(d, INT);
        BCAST(v, INT);
        BCAST(t, INT);
        // compute correct result
        ll correct = baseline(TEST_SIZE, TEST_SIZE);
        // compute test result
        ll test = optbaseline(TEST_SIZE, TEST_SIZE);
        SYNC();
        std::cout << correct << std::endl;
        std::cout << test << std::endl;
        bool isCorrect = true;
        if (IS_ROOT(rank) && correct != test) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }
    
    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
