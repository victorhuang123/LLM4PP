// Driver for 17_graph_highest_degree for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Compute the highest node degree in the graph. The graph is defined in the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int maxDegree(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    int N;
    int C;
    std::vector<int> d;
    std::vector<int> v;
    std::vector<int> t;
};

void generateInput(int N, int C, vector<int>& s, vector<int>& t, vector<int>& c) {
    s.resize(N);
    t.resize(N);
    c.resize(N);
    for (int i = 0; i < N; ++i) {
        s[i] = rand() % 100000 + 1;
        t[i] = rand() % 100000 + 1;
        if (s[i] > t[i]) swap(s[i], t[i]);
        c[i] = rand() % C;
    }
}

void reset(Context *ctx) {
    generateInput(ctx->N,ctx->C, ctx->d, ctx->v,  ctx->t);
    BCAST(ctx->d, INT);
    BCAST(ctx->v, INT);
    BCAST(ctx->t, INT);
}

Context *init() {
    std::cout << "init" << std::endl;
    Context *ctx = new Context();
    
    ctx->N = 1000;
    ctx->C = 1000;

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    int md = optbaseline(ctx->N, ctx->d, ctx->v, ctx->t);
    (void)md;
}

void NO_OPTIMIZE best(Context *ctx) {
    int md = baseline(ctx->N, ctx->d, ctx->v, ctx->t);
    (void)md;
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 512;
    std::vector<int> d;
    std::vector<int> v;
    std::vector<int> t;
    int rank;
    GET_RANK(rank);
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        generateInput(TEST_SIZE,TEST_SIZE, d, v,  t);

        BCAST(d, INT);
        BCAST(v, INT);
        BCAST(t, INT);
        // compute correct result
        int correct = baseline(TEST_SIZE,TEST_SIZE, d, v, t);
        // compute test result
        int test = optbaseline(TEST_SIZE,TEST_SIZE, d, v, t);
        SYNC();
        std::cout << correct << std::endl;
        std::cout << test << std::endl;
        bool isCorrect = true;
        if (IS_ROOT(rank) && correct != test) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }
    
    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
