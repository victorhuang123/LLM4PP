// Driver for 66_scan_longest_increaseing_subarray for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the first longest increasing contiguous subarray in the vector x.
//    i.e. if x=[−2, 1, 2, 0, −1, 2, 3, −5, 4] then [-2, 1, 2], [-1, 2, 3] are both longest increasing contiguous
//    subarray, but [-2, 1, 2] is the first one, thus we return [-2, 1, 2] as the result.
//    Example:
// 
//    input: [−2, 1, 2, 0, −1, 2, 3, −5, 4]
//    output: [-2, 1, 2]
// */
// void longestIncreasingSubarray(std::vector<int> const& x, std::vector<int> &output) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int> x;
    std::vector<int> output;
};

void reset(Context *ctx) {
    fillRand(ctx->x, -100, 100);
    BCAST(ctx->x, INT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->output.resize(DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    longestIncreasingSubarray(ctx->x, ctx->output);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctLongestIncreasingSubarray(ctx->x, ctx->output);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 2048;

    std::vector<int> x(TEST_SIZE), correct(TEST_SIZE), test(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, -100, 100);
        BCAST(x, INT);

        // compute correct result
        correctLongestIncreasingSubarray(x, correct);

        // compute test result
        longestIncreasingSubarray(x, test);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank) && !std::equal(correct.begin(), correct.end(), test.begin())) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
