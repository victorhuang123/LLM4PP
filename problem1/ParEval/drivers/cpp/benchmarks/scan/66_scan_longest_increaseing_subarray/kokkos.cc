// Driver for 66_scan_longest_increaseing_subarray for Kokkos
// #include <Kokkos_Core.hpp>
// 
// /* Return the first longest increasing contiguous subarray in the vector x.
//    i.e. if x=[−2, 1, 2, 0, −1, 2, 3, −5, 4] then [-2, 1, 2], [-1, 2, 3] are both longest increasing contiguous
//    subarray, but [-2, 1, 2] is the first one, thus we return [-2, 1, 2] as the result.
//    Example:
// 
//    input: [−2, 1, 2, 0, −1, 2, 3, −5, 4]
//    output: [-2, 1, 2]
// */
// void longestIncreasingSubarray(std::vector<int> const& x, std::vector<int> &output) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "kokkos-includes.hpp"

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    Kokkos::View<const int*> x;
    Kokkos::View<int*> xNonConst;
    Kokkos::View<int*> output;

    std::vector<int> h_x;
    std::vector<int> h_output;
};

void reset(Context *ctx) {
    fillRand(ctx->h_x, -100, 100);
    std::fill(ctx->h_output.begin(), ctx->h_output.end(), 0);

    copyVectorToView(ctx->h_x, ctx->xNonConst);
    ctx->x = ctx->xNonConst;
    Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), ctx->output, 0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->h_x.resize(DRIVER_PROBLEM_SIZE);
    ctx->h_output.resize(DRIVER_PROBLEM_SIZE);

    ctx->xNonConst = Kokkos::View<int*>("x", DRIVER_PROBLEM_SIZE);
    ctx->output = Kokkos::View<int*>("output", DRIVER_PROBLEM_SIZE);

    reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    longestIncreasingSubarray(ctx->x, ctx->output);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctLongestIncreasingSubarray(ctx->h_x, ctx->h_output);
}

bool validate(Context *ctx) {
    const size_t TEST_SIZE = 2048;

    std::vector<int> h_x(TEST_SIZE), correct(TEST_SIZE);

    Kokkos::View<int*> xNonConst("x", TEST_SIZE);
    Kokkos::View<const int*> x;
    Kokkos::View<int*> test("test", TEST_SIZE);

    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(h_x, -100, 100);
        std::fill(correct.begin(), correct.end(), 0);

        copyVectorToView(h_x, xNonConst);
        x = xNonConst;
        Kokkos::Experimental::fill(Kokkos::DefaultExecutionSpace(), test, 0);

        // compute correct result
        correctLongestIncreasingSubarray(h_x, correct);

        // compute test result
        longestIncreasingSubarray(x, test);

        for (int i = 0; i < TEST_SIZE; i++) {
            if (correct[i] != test(i)) {
                return false;
            }
        }
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
